{"version":3,"sources":["serviceWorker.js","containers/ErrorBoundary.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Button.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Card","id","name","username","email","set","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","Button","setChange","onClick","App","onSearchChange","event","searchfield","target","value","onSetChange1","onSetChange2","onSetChange3","onSetChange4","filteredRobots","filter","robot","toLowerCase","includes","marginLeft","fetch","then","res","json","users","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.03b6df1b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t\thasError : false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch (error, info) {\r\n\t\tthis.setState({ hasError : true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn (\r\n\t\t\t\t<h1> Ooops, Somethings is going Wrong!</h1>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\tthis.props.children\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Card = ({ id, name, username, email, set }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-lightest-blue dib br3 pa3 ma2 grow ba bw1 shadow-5 pointer'>\r\n\t\t\t<img src={`https://robohash.org/${name}?size=250x250&set=${set}`} alt=\"robo_img\" />\r\n\t\t\t<div>\r\n\t\t\t\t<h3>{name}</h3>\r\n\t\t\t\t<p className='b'>{username}</p>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n\r\n// tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots, set }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={robots[i].id} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\tusername={robots[i].username} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t\tset={set}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input \r\n\t\t\t\tclassName='bg-washed-green ba bw1 b--lightest-blue pa2 ma2 '\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div className='tc' style={{overflowY: 'scroll', border: '2px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nimport './Button.css'\r\n\r\nconst Button = ({ name, setChange}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button type='button' \r\n\t\t\t\t\tclassName='link dim yellow dib h2 w2 br-100 mr3 bg-light-purple ba b--black-10'\r\n\t\t\t\t\tonClick={setChange}>\r\n\t\t\t\t{name}\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Button;\r\n\r\n// link dim gray dib h2 w2 br-100 mr3 pa2 bg-near-white ba b--black-10","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport ErrorBoundary from './ErrorBoundary' \r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Button from '../components/Button';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n  \tsuper();\r\n  \tthis.state = {\r\n  \t\trobots : [],\r\n  \t\tsearchfield : '',\r\n      set : 'set1'\r\n  \t};\r\n  };\r\n  \r\n  onSearchChange = (event) => {\r\n  \tthis.setState( {searchfield: event.target.value }) \r\n  };\r\n\r\n  onSetChange1 = (event) => {\r\n    this.setState({set : ''})\r\n  };\r\n\r\n  onSetChange2 = (event) => {\r\n    this.setState({set : 'set2'})\r\n  };\r\n\r\n  onSetChange3 = (event) => {\r\n    this.setState({set : 'set3'})\r\n  };\r\n\r\n  onSetChange4 = (event) => {\r\n    this.setState({set : 'set4'})\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchfield, set } = this.state;\r\n  \tconst filteredRobots = robots.filter(robot => {\r\n  \t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n  \t\t  })\r\n      return (\r\n        <div className='tc'>\r\n        \t<h1 className='ttu f1 fw2 light-blue' style={{marginLeft: 'auto'}}>robofriends</h1>\r\n        \t<SearchBox searchChange={this.onSearchChange} />\r\n          <div className='flex justify-end mb2'>\r\n            <Button name={1} setChange={this.onSetChange1}/>\r\n            <Button name={2} setChange={this.onSetChange2}/>\r\n            <Button name={3} setChange={this.onSetChange3}/>\r\n            <Button name={4} setChange={this.onSetChange4}/>\r\n          </div>\r\n        \t<Scroll>\r\n            <ErrorBoundary>\r\n          \t <CardList robots={filteredRobots} set={set} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  componentDidMount() {\r\n  \tfetch('https://jsonplaceholder.typicode.com/users')\r\n  \t\t.then(res => res.json())\r\n  \t\t.then(users => this.setState({ robots: users }))\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport App from './containers/App';;\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}